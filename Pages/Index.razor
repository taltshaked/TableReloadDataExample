@page "/"
@using System.Timers
@using AntDesign;
@using AntDesignExample.Helpers
@using AntDesignExample.Model

<PageTitle>Index</PageTitle>
<Form ValidateOnChange="true" Layout="inline"
      Model="@personInfoBatch">
    <Validator>
        <DelegatingCustomValidator OnFieldChanged="async () => await Search()" />
    </Validator>
    <ChildContent>
        <FormItem Label="@usersLabel">
            <Select Mode="multiple"
                    DataSource="@sourceUI"
                    Placeholder="Please select"
                    @bind-Values="@selectedPersons"
                    ValueName="@nameof(PersonInfoUI.Id)"
                    LabelName="@nameof(PersonInfoUI.Name)"
                    GroupName="@nameof(PersonInfoUI.Company)"
                    TItemValue="string"
                    TItem="PersonInfoUI"
                    OnSelectedItemsChanged="OnSelectedItemsChangedHandler"
                    Style="width: 200px;"
                    SortByLabel="@SortDirection.Ascending"
                    SortByGroup="@SortDirection.Ascending"
                    EnableSearch
                    AllowClear>
            </Select>
        </FormItem>
        <FormItem>
            <Divider Type="DirectionVHType.Vertical" />
        </FormItem>
        <FormItem Label="No scheduled jobs">
            <Switch @bind-Value="@excludeScheduledJobs" />
        </FormItem>
        <FormItem>
            <Divider Type="DirectionVHType.Vertical" />
        </FormItem>
        <FormItem Label="Only in progress">
            <Switch @bind-Value="@hideCompleted" />
        </FormItem>
        <FormItem>
            <Divider Type="DirectionVHType.Vertical" />
        </FormItem>
        <FormItem Label="Use local time">
            <Switch @bind-Value="@useLocalTime" />
        </FormItem>
        <FormItem>
            <Divider Type="DirectionVHType.Vertical" />
        </FormItem>
        <Button Type="@ButtonType.Default" OnClick="@OnToggleVisibility" Style="width: 120px;">@(showMoreFilters ? "Less Filters" : "More Filters")</Button>
    </ChildContent>
</Form>
<Divider Type="DirectionVHType.Horizontal" Style="@moreFiltersVisibility" />
<Form Style="@moreFiltersVisibility" ValidateOnChange="true" Layout="inline"
      Model="@personInfoBatch">
      <Validator>
        <DelegatingCustomValidator OnFieldChanged="async () => await Search()" />
    </Validator>
    <ChildContent>
    <FormItem Label="In the last">
        <Select DataSource="@Timeframe.Timeframes"
                @bind-Value="@selectedTimeframe"
                ValueName="@nameof(Timeframe.Duration)"
                LabelName="@nameof(Timeframe.Name)"
                TItemValue="Timeframe.DurationType"
                TItem="Timeframe"
                OnSelectedItemChanged="OnSelectedItemChangedHandler"
                Style="width: 120px;"
                EnableSearch>
        </Select>
    </FormItem>
    <FormItem>
        <Divider Type="DirectionVHType.Vertical" />
    </FormItem>
    <Text Style="margin-right: 7.5px; margin-top: 5px">Job ID:</Text>
    <Input TValue="string" Value="@jobIdStr" OnInput="@(v => OnInput(v))" OnPressEnter="@(e => OnPressEnter(e))" Placeholder="Enter a job ID" Style="width: 120px;"></Input>
    <FormItem>
        <Select Mode="multiple"
                DataSource="@jobIds"
                Placeholder="Selected job IDs"
                @bind-Values="@selectedJobIds"
                TItemValue="int"
                TItem="int"
                OnSelectedItemsChanged="OnSelectedItemsChangedHandler"
                Style="width: 200px;"
                SortByLabel="@SortDirection.Ascending"
                EnableSearch
                AllowClear>
        </Select>
    </FormItem>
    <FormItem>
        <Divider Type="DirectionVHType.Vertical" />
    </FormItem>
    <FormItem>
        <Tooltip Title="@("More filters")">
            <Button Type="@ButtonType.Default" OnClick="@OnCalcDates">Calc</Button>
        </Tooltip>
    </FormItem>
    </ChildContent>
</Form>

@code {
    PersonInfo[] source = Array.Empty<PersonInfo>();
    PersonInfoUI[] sourceUI => source.Select(s => new PersonInfoUI(s)).ToArray();
    IEnumerable<string> selectedPersons = Array.Empty<string>();
    PersonInfoBatch personInfoBatch = new PersonInfoBatch { Persons = new[] { new PersonInfo { Company = "IBM", Name = "Bob", Age = 30 }, new PersonInfo { Company = "Apple", Name = "Mike", Age = 40 } } };
    string jobIdStr = "123";
    IEnumerable<int> jobIds = Array.Empty<int>();
    IEnumerable<int> selectedJobIds = Array.Empty<int>();
    Timeframe[] timeframes = Timeframe.Timeframes;
    Timeframe.DurationType selectedTimeframe = Timeframe.DurationType.All;
    bool excludeScheduledJobs;
    bool hideCompleted;
    bool useLocalTime;
    bool showMoreFilters = true;
    bool canViewOtherJobs = true;
    string usersLabel => canViewOtherJobs ? "Users" : "User";
    string moreFiltersVisibility => $"{(showMoreFilters ? "" : "display: none")}";

    protected override async Task OnInitializedAsync()
    {
        const int min = 1;
        const int max = 10;
        var persons = new List<PersonInfo>();

        for (var i = min; i < max; i++)
        {
            var newItem = new PersonInfo { Age = i, Name = "Name" + i, Company = "Company" + i };
            persons.Add(newItem);
            if (i == min || i == max - 1)
            {
                selectedPersons = selectedPersons.Append(new PersonInfoUI(newItem).Id);
            }
        }
        source = persons.ToArray();
    }

    private async Task Search(bool noSpinner = false)
    {
    }

    private void OnSelectedItemsChangedHandler(IEnumerable<PersonInfo> values)
    {
    }

    private void OnSelectedItemsChangedHandler(IEnumerable<int> values)
    {
    }

    private void OnSelectedItemChangedHandler(Timeframe value)
    {
        var from = value.FromDateAndTime;
        var to = value.UntilDateAndTime;
        var diff = to - from;
    }

    private Task OnInput(ChangeEventArgs args)
    {
        var value = args.Value as string;
        var result = 0;
        if (int.TryParse(value, out result))
        {
            jobIdStr = value.Trim();
        }

        return Task.CompletedTask; // This method must return Task to be used as the OnChange handler
    }

    private Task OnPressEnter(KeyboardEventArgs args)
    {
        int jobId;
        if (!int.TryParse(jobIdStr, out jobId) || jobId < 1)
        {
            jobIdStr = string.Empty;

            return Task.CompletedTask; // This method must return Task to be used as the OnChange handler
        }

        if (jobIds == null)
        {
            jobIds = Array.Empty<int>();
        }
        if (selectedJobIds == null)
        {
            selectedJobIds = Array.Empty<int>();
        }
        if (!Enumerable.Contains<int>(jobIds, (int)jobId))
        {
            jobIds = jobIds.Append((int)jobId);
        }
        if (!Enumerable.Contains<int>(selectedJobIds, (int)jobId))
        {
            selectedJobIds = selectedJobIds.Append((int)jobId);
        }

        StateHasChanged();

        jobIdStr = string.Empty;

        return Task.CompletedTask; // This method must return Task to be used as the OnChange handler
    }

    private void OnTimeRangeChange(DateRangeChangedEventArgs args)
    {
    }

    private Task OnToggleVisibility()
    {
        showMoreFilters = !showMoreFilters;

        return Task.CompletedTask; // This method must return Task to be used as the OnChange handler
    }

    private Task OnCalcDates()
    {
        return Task.CompletedTask; // This method must return Task to be used as the OnChange handler
    }
}
