@page "/"
@using System.Timers
@using AntDesign;
@using AntDesignExample.Model

<PageTitle>Index</PageTitle>

<Form ValidateOnChange="true" Layout="inline"
      Model="@personInfoBatch">
    <FormItem Label="@usersLabel">
        <Select Mode="multiple"
                DataSource="@sourceUI"
                Placeholder="Please select"
                @bind-Values="@selectedPersons"
                ValueName="@nameof(PersonInfoUI.Id)"
                LabelName="@nameof(PersonInfoUI.Name)"
                GroupName="@nameof(PersonInfoUI.Company)"
                TItemValue="string"
                TItem="PersonInfoUI"
                OnSelectedItemsChanged="OnSelectedItemsChangedHandler"
                Style="width: 200px;"
                SortByLabel="@SortDirection.Ascending"
                SortByGroup="@SortDirection.Ascending"
                EnableSearch
                AllowClear>
        </Select>
    </FormItem>
    <FormItem>
        <Divider Type="DirectionVHType.Vertical" />
    </FormItem>
    <FormItem Label="No scheduled jobs">
        <Switch @bind-Value="@excludeScheduledJobs" />
    </FormItem>
    <FormItem>
        <Divider Type="DirectionVHType.Vertical" />
    </FormItem>
    <FormItem Label="Only in progress">
        <Switch @bind-Value="@hideCompleted" />
    </FormItem>
    <FormItem>
        <Divider Type="DirectionVHType.Vertical" />
    </FormItem>
    <FormItem Label="Use local time">
        <Switch @bind-Value="@useLocalTime" />
    </FormItem>
    <FormItem>
        <Divider Type="DirectionVHType.Vertical" />
    </FormItem>
    <Tooltip Title="@("More filters")">
        <Button Type="@ButtonType.Default" Icon="ellipsis" OnClick="@OnToggleVisibility" />
    </Tooltip>
</Form>
<Divider Type="DirectionVHType.Horizontal" Style="@moreFiltersVisibility" />
<Form Style="@moreFiltersVisibility" ValidateOnChange="false" Layout="inline"
      Model="@personInfoBatch">
    <FormItem Label="Dates">
        <RangePicker TValue="DateTime[]" @bind-Value="@dates" OnChange="OnTimeRangeChange" />
    </FormItem>
    <FormItem>
        <Divider Type="DirectionVHType.Vertical" />
    </FormItem>
    <Text Style="margin-right: 7.5px; margin-top: 5px">Job ID:</Text>
    <Tooltip Title="@("Enter job ID and hit Enter or Tab")">
        <AntDesign.InputNumber TValue="int?" ValueChanged="@(v => OnValueChanged(v))" Value="@jobId" Style="margin-right: 8px"></AntDesign.InputNumber>
    </Tooltip>
    <FormItem>
        <Select Mode="multiple"
                DataSource="@jobIds"
                Placeholder="Selected job IDs"
                @bind-Values="@selectedJobIds"
                TItemValue="int"
                TItem="int"
                OnSelectedItemsChanged="OnSelectedItemsChangedHandler"
                Style="width: 200px;"
                SortByLabel="@SortDirection.Ascending"
                EnableSearch
                AllowClear>
        </Select>
    </FormItem>
    <FormItem>
        <Divider Type="DirectionVHType.Vertical" />
    </FormItem>
    <FormItem>
        <Tooltip Title="@("More filters")">
            <Button Type="@ButtonType.Default" OnClick="@OnCalcDates">Calc</Button>
        </Tooltip>
    </FormItem>
</Form>

@code {
    PersonInfo[] source = Array.Empty<PersonInfo>();
    PersonInfoUI[] sourceUI => source.Select(s => new PersonInfoUI(s)).ToArray();
    IEnumerable<string> selectedPersons = Array.Empty<string>();
    PersonInfoBatch personInfoBatch = new PersonInfoBatch { Persons = new[] { new PersonInfo { Company = "IBM", Name = "Bob", Age = 30 }, new PersonInfo { Company = "Apple", Name = "Mike", Age = 40 } } };
    int? jobId;
    IEnumerable<int> jobIds = Array.Empty<int>();
    IEnumerable<int> selectedJobIds = Array.Empty<int>();
    DateTime[] dates = new[] { DateTime.Today, DateTime.Today };
    bool excludeScheduledJobs;
    bool hideCompleted;
    bool useLocalTime;
    bool showMoreFilters = true;
    bool canViewOtherJobs = true;
    string usersLabel => canViewOtherJobs ? "Users" : "User";
    string moreFiltersVisibility => $"{(showMoreFilters ? "" : "display: none")}";

    protected override async Task OnInitializedAsync()
    {
        const int min = 1;
        const int max = 10;
        var persons = new List<PersonInfo>();

        for (var i = min; i < max; i++)
        {
            var newItem = new PersonInfo { Age = i, Name = "Name" + i, Company = "Company" + i };
            persons.Add(newItem);
            if (i == min || i == max - 1)
            {
                selectedPersons = selectedPersons.Append(new PersonInfoUI(newItem).Id);
            }
        }
        source = persons.ToArray();
    }

    private void OnSelectedItemsChangedHandler(IEnumerable<PersonInfo> values)
    {
    }

    private void OnSelectedItemsChangedHandler(IEnumerable<int> values)
    {
    }

    private Task OnValueChanged(int? value)
    {
        if (value.HasValue && value > 0)
        {
            if (jobIds == null)
            {
                jobIds = Array.Empty<int>();
            }
            if (selectedJobIds == null)
            {
                selectedJobIds = Array.Empty<int>();
            }
            if (!Enumerable.Contains<int>(jobIds, (int)value))
            {
                jobIds = jobIds.Append((int)value);
            }
            if (!Enumerable.Contains<int>(selectedJobIds, (int)value))
            {
                selectedJobIds = selectedJobIds.Append((int)value);
            }
        }

        StateHasChanged();

        return Task.CompletedTask; // This method must return Task to be used as the OnChange handler
    }

    private void OnTimeRangeChange(DateRangeChangedEventArgs args)
    {
    }

    private Task OnToggleVisibility()
    {
        showMoreFilters = !showMoreFilters;

        return Task.CompletedTask; // This method must return Task to be used as the OnChange handler
    }

    private Task OnCalcDates()
    {
        if (dates[1] != DateTime.MinValue)
        {
            dates[1] = dates[1] + TimeSpan.FromSeconds(86399);
        }

        return Task.CompletedTask; // This method must return Task to be used as the OnChange handler
    }
}
